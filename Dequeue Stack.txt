import java.util.Deque;
import java.util.LinkedList;

public class StackUsingTwoDeques {
    private Deque<Integer> deque1;
    private Deque<Integer> deque2;

    // Constructor to initialize the stack
    public StackUsingTwoDeques() {
        deque1 = new LinkedList<>();
        deque2 = new LinkedList<>();
    }

    // Method to push an element onto the stack
    public void push(int x) {
        deque1.addLast(x);
    }

    // Method to pop an element from the stack
    public int pop() {
        if (deque1.isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return -1;
        }

        // Move elements from deque1 to deque2, except the last one
        while (deque1.size() > 1) {
            deque2.addLast(deque1.removeFirst());
        }

        // The last element in deque1 is the top of the stack
        int popped = deque1.removeFirst();

        // Swap the deques
        Deque<Integer> temp = deque1;
        deque1 = deque2;
        deque2 = temp;

        return popped;
    }

    // Method to get the top element of the stack
    public int top() {
        if (deque1.isEmpty()) {
            System.out.println("Stack is empty. Nothing at the top.");
            return -1;
        }

        // Move elements from deque1 to deque2, except the last one
        while (deque1.size() > 1) {
            deque2.addLast(deque1.removeFirst());
        }

        // The last element in deque1 is the top of the stack
        int top = deque1.removeFirst();

        // Put the top element back to deque1
        deque2.addLast(top);

        // Swap the deques
        Deque<Integer> temp = deque1;
        deque1 = deque2;
        deque2 = temp;

        return top;
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return deque1.isEmpty();
    }

    // Main method to test the stack using two deques
    public static void main(String[] args) {
        StackUsingTwoDeques stack = new StackUsingTwoDeques();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);
        stack.push(50);

        System.out.println("Top element is: " + stack.top());
        System.out.println("Popped element is: " + stack.pop());
        System.out.println("Top element is: " + stack.top());

        stack.push(60);
        System.out.println("Top element is: " + stack.top());

        while (!stack.isEmpty()) {
            System.out.println("Popped element is: " + stack.pop());
        }

        System.out.println("Stack is empty: " + stack.isEmpty());
    }
}
